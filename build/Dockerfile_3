FROM centos:7

LABEL org.opencontainers.image.source=https://github.com/x-software-com/mxl-docker
LABEL org.opencontainers.image.description="Build image for MXL version 3"
LABEL org.opencontainers.image.licenses="MIT OR APACHE-2.0"

COPY yum.wrapper /usr/bin
RUN cd /usr/bin \
  && mv yum yum.orig \
  && mv yum.wrapper yum

# Enable installation of doc files in yum (important for COPYING files)
RUN sed -i -re 's|^tsflags=nodocs|tsflags=|g' /etc/yum.conf

# Add epel repository
RUN yum -y install epel-release \
  && yum clean all \
  && rm -rf /var/cache/yum

# Install devtoolset-11
RUN yum -y install centos-release-scl \
  && yum -y install devtoolset-11 \
  && yum clean all \
  && rm -rf /var/cache/yum

RUN echo -e "source /opt/rh/devtoolset-11/enable" >> /etc/profile.d/compiler.sh

# Basic tools:
RUN yum -y install \
  bzip2 \
  xz \
  lbzip2-utils \
  && yum clean all \
  && rm -rf /var/cache/yum

# Required for building packages
RUN yum -y install gcc-c++ make autoconf automake libtool zlib-devel \
  && yum clean all \
  && rm -rf /var/cache/yum

ENV LD_LIBRARY_PATH /usr/local/lib:/usr/local/lib64

ARG PACKAGE=git
ARG VERSION=2.38.0
RUN yum -y install gettext curl-devel \
  && yum clean all \
  && rm -rf /var/cache/yum \
  && cd /tmp \
  && curl -L -O https://cdn.kernel.org/pub/software/scm/${PACKAGE}/${PACKAGE}-${VERSION}.tar.xz \
  && tar -xf ${PACKAGE}-${VERSION}.tar.xz \
  && cd ${PACKAGE}-${VERSION} \
  && source /etc/profile.d/compiler.sh \
  && ./configure \
  && make -j$(nproc) \
  && make install -j$(nproc) \
  && rm -rf /tmp/${PACKAGE}*

ARG PACKAGE=make
ARG VERSION=4.3
RUN cd /tmp \
  && curl -L -O https://ftp.gnu.org/gnu/${PACKAGE}/${PACKAGE}-${VERSION}.tar.gz \
  && tar -xf ${PACKAGE}-${VERSION}.tar.gz \
  && cd ${PACKAGE}-${VERSION} \
  && source /etc/profile.d/compiler.sh \
  && ./configure \
  && make -j$(nproc) \
  && make install -j$(nproc) \
  && rm -rf /tmp/${PACKAGE}*

ARG PACKAGE=ninja
ARG VERSION=1.11.1
RUN cd /tmp \
  && curl -L -O https://github.com/${PACKAGE}-build/${PACKAGE}/archive/refs/tags/v${VERSION}.tar.gz \
  && tar -xf v${VERSION}.tar.gz \
  && cd ${PACKAGE}-${VERSION} \
  && source /etc/profile.d/compiler.sh \
  && ./configure.py --bootstrap \
  && cp ninja /usr/local/bin \
  && rm -rf /tmp/${PACKAGE}*

ARG PACKAGE=cmake
ARG VERSION=3.24.2
ARG FILENAME=${PACKAGE}-${VERSION}-Linux-x86_64
RUN cd /usr/local \
  && curl -L -O http://github.com/Kitware/CMake/releases/download/v${VERSION}/${FILENAME}.tar.gz \
  && tar --strip-components=1 -xf ${FILENAME}.tar.gz \
  && rm -rf ${FILENAME}.tar.gz

# required for binutils
ARG PACKAGE=texinfo
ARG VERSION=6.8
RUN cd /tmp \
  && curl -L -O https://ftp.gnu.org/gnu/${PACKAGE}/${PACKAGE}-${VERSION}.tar.xz \
  && tar -xf ${PACKAGE}-${VERSION}.tar.xz \
  && cd ${PACKAGE}-${VERSION} \
  && source /etc/profile.d/compiler.sh \
  && ./configure \
  && make -j$(nproc) \
  && make install -j$(nproc) \
  && rm -rf /tmp/${PACKAGE}*

ARG PACKAGE=binutils
ARG VERSION=2.39
RUN yum -y install bison \
  && yum clean all \
  && rm -rf /var/cache/yum \
  && cd /tmp \
  && curl -L -O https://ftp.gnu.org/gnu/${PACKAGE}/${PACKAGE}-${VERSION}.tar.xz \
  && tar -xf ${PACKAGE}-${VERSION}.tar.xz \
  && cd ${PACKAGE}-${VERSION} \
  && source /etc/profile.d/compiler.sh \
  && ./configure \
  --enable-gold \
  --enable-ld=default \
  --enable-plugins \
  --disable-werrror \
  --enable-64-bit-bfd \
  --with-system-zlib \
  --disable-multilib \
  && make -j$(nproc) \
  && make install -j$(nproc) \
  && rm -rf /tmp/${PACKAGE}*


# Required base packages
RUN yum -y install xz bzip2 less openssl11-devel \
  && yum clean all \
  && rm -rf /var/cache/yum

ARG PACKAGE=Python
ARG VERSION=3.11.7
RUN cd /tmp \
  && curl -L -O https://www.python.org/ftp/python/${VERSION}/${PACKAGE}-${VERSION}.tar.xz \
  && tar -xf ${PACKAGE}-${VERSION}.tar.xz \
  && mkdir ${PACKAGE} \
  && cd ${PACKAGE} \
  && sed -i 's/PKG_CONFIG openssl /PKG_CONFIG openssl11 /g' /tmp/${PACKAGE}-${VERSION}/configure \
  && source /etc/profile.d/compiler.sh \
  && /tmp/${PACKAGE}-${VERSION}/configure \
  && make install -j$(nproc) \
  && rm -rf /tmp/${PACKAGE}*

RUN yum -y install diffutils pkgconfig nasm yasm flex clang rsync desktop-file-utils \
  && yum clean all \
  && rm -rf /var/cache/yum

RUN yum -y install \
  pulseaudio-libs-devel vulkan-loader-devel \
  mesa-libGL-devel libX11-devel libXft-devel libXext-devel libXrandr-devel libXi-devel libXcursor-devel libXdamage-devel libXinerama-devel libxkbcommon-devel libxkbcommon-x11-devel \
  perl-IPC-Cmd \
  && yum clean all \
  && rm -rf /var/cache/yum

# Install requirements for vcpkg:
RUN yum -y install curl zip unzip tar \
  && yum clean all \
  && rm -rf /var/cache/yum

# Requirement for EGL support in gst-plugin-gtk4
RUN yum -y install mesa-libEGL-devel \
  && yum clean all \
  && rm -rf /var/cache/yum

# Requirement for libjpeg-turbo vcpkg build
ARG PACKAGE=nasm
ARG VERSION=2.15.05
RUN pushd /tmp \
  && curl -LO https://www.nasm.us/pub/nasm/releasebuilds/${VERSION}/${PACKAGE}-${VERSION}.tar.bz2 \
  && tar -xf ${PACKAGE}-${VERSION}.tar.bz2 \
  && cd ${PACKAGE}-${VERSION} \
  && source /etc/profile.d/compiler.sh \
  && ./configure \
  && make install \
  && popd \
  && rm -rf /tmp/${PACKAGE}*

# Requirement for dtolnay/rust-toolchain@master because of centos7
RUN yum -y install openssl-devel \
  && yum clean all \
  && rm -rf /var/cache/yum
ARG PACKAGE=curl
ARG VERSION=8.5.0
RUN pushd /tmp \
  && curl -LO https://curl.se/download/${PACKAGE}-${VERSION}.tar.xz \
  && tar -xf ${PACKAGE}-${VERSION}.tar.xz \
  && cd ${PACKAGE}-${VERSION} \
  && source /etc/profile.d/compiler.sh \
  && ./configure --with-openssl \
  && make install \
  && popd \
  && rm -rf /tmp/${PACKAGE}*

RUN echo -e "export PKG_CONFIG_PATH=/usr/local/lib64/pkgconfig:/usr/local/lib/pkgconfig:/usr/local/share/pkgconfig:${PKG_CONFIG_PATH}" >> /etc/profile.d/pkg-config-path.sh
RUN echo -e "export PATH=/usr/local/bin:${PATH}" >> /etc/profile.d/usr-local-path.sh

# Reinstall some packages to get access to deleted license texts:
RUN yum -y reinstall libblkid lz4-libs libcap libgcrypt pcre bzip2-libs \
  && yum clean all \
  && rm -rf /var/cache/yum

RUN pip3 install meson

# Install latest wayland version because of centos7
RUN yum -y install libffi-devel libxml2-devel \
  && yum clean all \
  && rm -rf /var/cache/yum

ARG PACKAGE=wayland
ARG VERSION=1.22.0
RUN pushd /tmp \
  && curl -LO https://gitlab.freedesktop.org/wayland/${PACKAGE}/-/releases/${VERSION}/downloads/${PACKAGE}-${VERSION}.tar.xz \
  && tar -xf ${PACKAGE}-${VERSION}.tar.xz \
  && cd ${PACKAGE}-${VERSION} \
  && source /etc/profile.d/compiler.sh \
  && meson -Ddocumentation=false build/ \
  && ninja -C build/ install \
  && popd \
  && rm -rf /tmp/${PACKAGE}*

ARG PACKAGE=wayland-protocols
ARG VERSION=1.33
RUN pushd /tmp \
  && curl -LO https://gitlab.freedesktop.org/wayland/${PACKAGE}/-/releases/${VERSION}/downloads/${PACKAGE}-${VERSION}.tar.xz \
  && tar -xf ${PACKAGE}-${VERSION}.tar.xz \
  && cd ${PACKAGE}-${VERSION} \
  && source /etc/profile.d/compiler.sh \
  && source /etc/profile.d/pkg-config-path.sh \
  && source /etc/profile.d/usr-local-path.sh \
  && meson build/ \
  && ninja -C build/ install \
  && popd \
  && rm -rf /tmp/${PACKAGE}*

# Requirement for GStreamer vaapi because of centos7
ARG PACKAGE=libva
ARG VERSION=2.1.0
RUN pushd /tmp \
  && curl -LO https://github.com/intel/${PACKAGE}/releases/download/${VERSION}/${PACKAGE}-${VERSION}.tar.bz2 \
  && tar -xf ${PACKAGE}-${VERSION}.tar.bz2 \
  && cd ${PACKAGE}-${VERSION} \
  && source /etc/profile.d/compiler.sh \
  && source /etc/profile.d/pkg-config-path.sh \
  && ./configure \
  && make install \
  && popd \
  && rm -rf /tmp/${PACKAGE}*

# Install rust and some cargo tools
RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs > /tmp/rustup.sh \
  && sh /tmp/rustup.sh -y \
  && rm /tmp/rustup.sh \
  && echo -e "source \"\$HOME/.cargo/env\"" >> /etc/profile.d/rust.sh \
  && source /etc/profile.d/rust.sh \
  && cargo install cocogitto \
  && cargo install just \
  && cargo install cargo-bundle-licenses \
  && cargo install cargo-audit \
  && cargo install cargo-version-util \
  && cargo install typos-cli

# Appimage installation:
COPY appimage/setup.sh /tmp
COPY appimage/patchelf.sh /tmp
COPY appimage/linuxdeploy-plugin-gtk.patch /tmp
RUN pushd /tmp \
  && ./setup.sh \
  && rm setup.sh

# Makeself installation:
RUN yum -y install unzip chrpath \
  && yum clean all \
  && rm -rf /var/cache/yum

ARG VERSION=2.5.0
RUN cd /tmp \
  && curl -LO https://github.com/megastep/makeself/releases/download/release-${VERSION}/makeself-${VERSION}.run \
  && chmod +x makeself-${VERSION}.run \
  && mkdir -p /opt \
  && cd /opt \
  && /tmp/makeself-${VERSION}.run \
  && mv makeself-${VERSION} makeself \
  && rm /tmp/makeself-${VERSION}.run
